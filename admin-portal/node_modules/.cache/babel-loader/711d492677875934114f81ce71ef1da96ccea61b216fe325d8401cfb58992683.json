{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProjectPackage\\\\claude_code_project\\\\RedCellProject\\\\wx_mini_program\\\\admin-portal\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [adminInfo, setAdminInfo] = useState(null);\n\n  // 检查本地存储的token\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('admin_token');\n      if (token) {\n        try {\n          // 验证token有效性\n          const response = await api.get('/admin/profile');\n          if (response.data.success) {\n            setIsAuthenticated(true);\n            setAdminInfo(response.data.data);\n          } else {\n            localStorage.removeItem('admin_token');\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('admin_token');\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async password => {\n    try {\n      const response = await api.post('/admin/login', {\n        password\n      });\n      if (response.data.success) {\n        const {\n          token,\n          permissions,\n          expireTime\n        } = response.data.data;\n\n        // 保存token和用户信息\n        localStorage.setItem('admin_token', token);\n        localStorage.setItem('admin_permissions', JSON.stringify(permissions));\n        localStorage.setItem('admin_expire_time', expireTime);\n        setIsAuthenticated(true);\n        setAdminInfo({\n          username: 'admin',\n          permissions,\n          expireTime\n        });\n        message.success('登录成功');\n        return {\n          success: true\n        };\n      } else {\n        message.error(response.data.message || '登录失败');\n        return {\n          success: false,\n          message: response.data.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || '登录失败，请检查网络连接';\n      message.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await api.post('/admin/logout');\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 清除本地存储\n      localStorage.removeItem('admin_token');\n      localStorage.removeItem('admin_permissions');\n      localStorage.removeItem('admin_expire_time');\n      setIsAuthenticated(false);\n      setAdminInfo(null);\n      message.success('已退出登录');\n    }\n  };\n  const hasPermission = permission => {\n    var _adminInfo$permission;\n    return (adminInfo === null || adminInfo === void 0 ? void 0 : (_adminInfo$permission = adminInfo.permissions) === null || _adminInfo$permission === void 0 ? void 0 : _adminInfo$permission.includes(permission)) || false;\n  };\n  const value = {\n    isAuthenticated,\n    loading,\n    adminInfo,\n    login,\n    logout,\n    hasPermission\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"eFI0WGbRUKbpmZtr+3kghL+0/N4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","message","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","loading","setLoading","adminInfo","setAdminInfo","checkAuth","token","localStorage","getItem","response","get","data","success","removeItem","error","console","login","password","post","permissions","expireTime","setItem","JSON","stringify","username","_error$response","_error$response$data","errorMessage","logout","hasPermission","permission","_adminInfo$permission","includes","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ProjectPackage/claude_code_project/RedCellProject/wx_mini_program/admin-portal/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport api from '../utils/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [adminInfo, setAdminInfo] = useState(null);\n\n  // 检查本地存储的token\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('admin_token');\n      if (token) {\n        try {\n          // 验证token有效性\n          const response = await api.get('/admin/profile');\n          if (response.data.success) {\n            setIsAuthenticated(true);\n            setAdminInfo(response.data.data);\n          } else {\n            localStorage.removeItem('admin_token');\n          }\n        } catch (error) {\n          console.error('Token验证失败:', error);\n          localStorage.removeItem('admin_token');\n        }\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (password) => {\n    try {\n      const response = await api.post('/admin/login', { password });\n      \n      if (response.data.success) {\n        const { token, permissions, expireTime } = response.data.data;\n        \n        // 保存token和用户信息\n        localStorage.setItem('admin_token', token);\n        localStorage.setItem('admin_permissions', JSON.stringify(permissions));\n        localStorage.setItem('admin_expire_time', expireTime);\n        \n        setIsAuthenticated(true);\n        setAdminInfo({\n          username: 'admin',\n          permissions,\n          expireTime\n        });\n        \n        message.success('登录成功');\n        return { success: true };\n      } else {\n        message.error(response.data.message || '登录失败');\n        return { success: false, message: response.data.message };\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || '登录失败，请检查网络连接';\n      message.error(errorMessage);\n      return { success: false, message: errorMessage };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await api.post('/admin/logout');\n    } catch (error) {\n      console.error('登出请求失败:', error);\n    } finally {\n      // 清除本地存储\n      localStorage.removeItem('admin_token');\n      localStorage.removeItem('admin_permissions');\n      localStorage.removeItem('admin_expire_time');\n      \n      setIsAuthenticated(false);\n      setAdminInfo(null);\n      message.success('已退出登录');\n    }\n  };\n\n  const hasPermission = (permission) => {\n    return adminInfo?.permissions?.includes(permission) || false;\n  };\n\n  const value = {\n    isAuthenticated,\n    loading,\n    adminInfo,\n    login,\n    logout,\n    hasPermission\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}