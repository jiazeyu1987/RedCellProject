{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\n\n// 创建axios实例 - 使用相对路径通过代理访问后端\nconst api = axios.create({\n  baseURL: '/api',\n  // 使用代理路径\n  timeout: 10000\n});\n\n// 打印API配置信息\nconsole.log('🔗 API配置:', {\n  baseURL: api.defaults.baseURL,\n  timeout: api.defaults.timeout\n});\n\n// 请求拦截器 - 添加token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('admin_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API请求错误:', error);\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 401:\n        // Token过期或无效\n        localStorage.removeItem('admin_token');\n        localStorage.removeItem('admin_permissions');\n        localStorage.removeItem('admin_expire_time');\n        if (window.location.pathname !== '/login') {\n          message.error('登录已过期，请重新登录');\n          window.location.href = '/login';\n        }\n        break;\n      case 403:\n        message.error('权限不足');\n        break;\n      case 404:\n        message.error('请求的资源不存在');\n        break;\n      case 500:\n        message.error('服务器内部错误');\n        break;\n      default:\n        if (data !== null && data !== void 0 && data.message) {\n          message.error(data.message);\n        } else {\n          message.error('请求失败');\n        }\n    }\n  } else if (error.request) {\n    message.error('网络连接失败，请检查网络设置');\n  } else {\n    message.error('请求配置错误');\n  }\n  return Promise.reject(error);\n});\n\n// API接口定义\nexport const adminAPI = {\n  // 认证相关\n  login: password => api.post('/admin/login', {\n    password\n  }),\n  logout: () => api.post('/admin/logout'),\n  getProfile: () => api.get('/admin/profile'),\n  // 用户池管理\n  getUserPool: params => api.get('/admin/user-pool', {\n    params\n  }),\n  getUserDetail: userId => api.get(`/admin/users/${userId}`),\n  updateUserStatus: (userId, status, reason) => api.put(`/admin/users/${userId}/status`, {\n    status,\n    reason\n  }),\n  assignUser: (userId, providerId, notes) => api.post('/admin/assign-user', {\n    userId,\n    providerId,\n    notes\n  }),\n  batchAssignUsers: (userIds, algorithm, preferences) => api.post('/admin/auto-assign', {\n    userIds,\n    algorithm,\n    preferences\n  }),\n  // 服务者管理\n  getServiceProviders: params => api.get('/admin/service-providers', {\n    params\n  }),\n  getProviderDetail: providerId => api.get(`/admin/service-providers/${providerId}`),\n  updateProviderInfo: (providerId, data) => api.put(`/admin/service-providers/${providerId}`, data),\n  updateProviderServiceArea: (providerId, serviceArea) => api.put(`/admin/service-providers/${providerId}/service-area`, {\n    serviceArea\n  }),\n  // 分配管理\n  getAssignments: params => api.get('/admin/assignments', {\n    params\n  }),\n  getAssignmentHistory: params => api.get('/admin/assignment-history', {\n    params\n  }),\n  cancelAssignment: (assignmentId, reason) => api.post(`/admin/assignments/${assignmentId}/cancel`, {\n    reason\n  }),\n  // 统计数据\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getGeoData: () => api.get('/admin/dashboard/geo-data'),\n  getAssignmentTrends: timeRange => api.get('/admin/dashboard/assignment-trends', {\n    params: {\n      timeRange\n    }\n  }),\n  // 数据导出\n  exportUserData: (userIds, format) => api.get('/admin/users/export', {\n    params: {\n      userIds: userIds.join(','),\n      format\n    },\n    responseType: 'blob'\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","message","api","create","baseURL","timeout","console","log","defaults","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","data","removeItem","window","location","pathname","href","adminAPI","login","password","post","logout","getProfile","get","getUserPool","params","getUserDetail","userId","updateUserStatus","reason","put","assignUser","providerId","notes","batchAssignUsers","userIds","algorithm","preferences","getServiceProviders","getProviderDetail","updateProviderInfo","updateProviderServiceArea","serviceArea","getAssignments","getAssignmentHistory","cancelAssignment","assignmentId","getDashboardStats","getGeoData","getAssignmentTrends","timeRange","exportUserData","format","join","responseType"],"sources":["D:/ProjectPackage/claude_code_project/RedCellProject/wx_mini_program/admin-portal/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\nimport { message } from 'antd';\n\n// 创建axios实例 - 使用相对路径通过代理访问后端\nconst api = axios.create({\n  baseURL: '/api',  // 使用代理路径\n  timeout: 10000,\n});\n\n// 打印API配置信息\nconsole.log('🔗 API配置:', {\n  baseURL: api.defaults.baseURL,\n  timeout: api.defaults.timeout\n});\n\n// 请求拦截器 - 添加token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('admin_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API请求错误:', error);\n\n    if (error.response) {\n      const { status, data } = error.response;\n      \n      switch (status) {\n        case 401:\n          // Token过期或无效\n          localStorage.removeItem('admin_token');\n          localStorage.removeItem('admin_permissions');\n          localStorage.removeItem('admin_expire_time');\n          \n          if (window.location.pathname !== '/login') {\n            message.error('登录已过期，请重新登录');\n            window.location.href = '/login';\n          }\n          break;\n          \n        case 403:\n          message.error('权限不足');\n          break;\n          \n        case 404:\n          message.error('请求的资源不存在');\n          break;\n          \n        case 500:\n          message.error('服务器内部错误');\n          break;\n          \n        default:\n          if (data?.message) {\n            message.error(data.message);\n          } else {\n            message.error('请求失败');\n          }\n      }\n    } else if (error.request) {\n      message.error('网络连接失败，请检查网络设置');\n    } else {\n      message.error('请求配置错误');\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// API接口定义\nexport const adminAPI = {\n  // 认证相关\n  login: (password) => api.post('/admin/login', { password }),\n  logout: () => api.post('/admin/logout'),\n  getProfile: () => api.get('/admin/profile'),\n\n  // 用户池管理\n  getUserPool: (params) => api.get('/admin/user-pool', { params }),\n  getUserDetail: (userId) => api.get(`/admin/users/${userId}`),\n  updateUserStatus: (userId, status, reason) => \n    api.put(`/admin/users/${userId}/status`, { status, reason }),\n  assignUser: (userId, providerId, notes) => \n    api.post('/admin/assign-user', { userId, providerId, notes }),\n  batchAssignUsers: (userIds, algorithm, preferences) =>\n    api.post('/admin/auto-assign', { userIds, algorithm, preferences }),\n\n  // 服务者管理\n  getServiceProviders: (params) => api.get('/admin/service-providers', { params }),\n  getProviderDetail: (providerId) => api.get(`/admin/service-providers/${providerId}`),\n  updateProviderInfo: (providerId, data) => \n    api.put(`/admin/service-providers/${providerId}`, data),\n  updateProviderServiceArea: (providerId, serviceArea) =>\n    api.put(`/admin/service-providers/${providerId}/service-area`, { serviceArea }),\n\n  // 分配管理\n  getAssignments: (params) => api.get('/admin/assignments', { params }),\n  getAssignmentHistory: (params) => api.get('/admin/assignment-history', { params }),\n  cancelAssignment: (assignmentId, reason) =>\n    api.post(`/admin/assignments/${assignmentId}/cancel`, { reason }),\n\n  // 统计数据\n  getDashboardStats: () => api.get('/admin/dashboard/stats'),\n  getGeoData: () => api.get('/admin/dashboard/geo-data'),\n  getAssignmentTrends: (timeRange) => \n    api.get('/admin/dashboard/assignment-trends', { params: { timeRange } }),\n\n  // 数据导出\n  exportUserData: (userIds, format) => \n    api.get('/admin/users/export', { \n      params: { userIds: userIds.join(','), format },\n      responseType: 'blob'\n    }),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}